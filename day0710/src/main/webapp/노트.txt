var, let, const

var : 변수 중복선언 가능
var a = 10;
var a = 20;

let : 변수 중복 선언 불가능
let a = 10;
let a = 20;  	// X

const: 상수, 값을 변경 불가능
const a =10;
a = 20;			// X


------------------------------------------------------------------

<< 함수 만들기 >>

1. 함수 선언
function pro(){

}

2. 함수 표현식
var pro = function() {

}

-------------------------------------------------------------------

<< 매개변수가 있는 함수 >>

두수를 매개변수로 전달받아 더하기하여 출력하는 함수
function add(a, b){
	let r = a + b;
	alert("더하기 결과" + r);
}

<< 리턴값이 있는 함수 >>

두수를 매개변수로 전달받아 더하기 하여 반환하는 함수

function add(a,b){
	let r = a + b;
	return r;
}

------------------------------------------------------------

<< 콜백함수 >>
어떤 함수를 호출할 때에 그 함수가 완료된 다음 바로
또 다른 함수를 동작시키고자 할 때가 있는데
이때 함수호출시에 그 함수가 끝나고 동작할 함수를 매개변수로 전달한다.
이러한 함수를 "롤백함수" 라고 한다.

//이 함수는 매개변수로 함수를 전달받아
//자신의 일이 끝나면 배개변수로 전달받은 함수를 동작시킨다.
function pro(k){
	처리하고
	k();
}

function end(){

}

pro(end);
------------------------------------------------------------

//이 함수는 매개변수로 함수를 전달받아
//자신의 일이 끝나면 배개변수로 전달받은 함수를 동작시킨다.
function pro(k){
	처리하고
	k();
}

pro( function(){ });
------------------------------------------------------------
<<콜백 지옥>> 

pro(매개변수, function(){
	someFunction(매개변수, function(){
		someFunction(매개변수, function(){
			
		})
	})
})
------------------------------------------------------------

let data = ["홍길동", 20, "서울시 종로구 관철동"];
data[0]
data[1]
data[2]

//자바스크립트 객체의 표현
//객체 ==> 여러가지 속성과 동작으로 구성
let data = {name:"홍길동", age:20, addr:"서울시 종로구 관철동"}
data.name
data.age
data.addr

let data = {
			name:"홍길동",
			age:20,
			addr:"서울시 종로구 관철동"
}

for( 속성명 in 객체 ) {	<--- 객체의 속성 만큼 반복실행

}

for(key in data){
	alert(data.key); //X
	alert(data[key]);
}

------------------------------------------------------------------

let data = {
	name:"홍길동",
	age:20,
	addr:"서울시 종로구 관철동"
}

객체의 배열

let data = [10,20,30];	<-- 배열의 요소가 정수
let data [{},{},{}]; <-- 배열의 요소가 객체

let data = [
	{dno:10, dname:'기획팀', dloc:'종각'},
	{dno:20, dname:'영업팀', dloc:'종각'},
	{dno:30, dname:'개발1팀', dloc:'판교'},
	{dno:40, dname:'개발2팀', dloc:'가산'}
]
		
랙(i=0; i<data.length; i++){
	let row = data[i];
	//console.log(row.dno, row.dname, row.dloc);
	for(let key in row){
		row[data];
	}  
}

-----------------------------------------------------------------
DOM ( Document Object Model) - 문서 객체 모델

웹페이지가 로드되면 자바스크립트는 해당페이지의
모든 html구성요소를 객체로 인식하고 관리한다.

예를 들어 다음과 같은 html이 있다면
<html>
	<head>
		<title>Test</title>
	</head>
	<body>
		<a href="www.naver.com">naver</a>
		<h1>Hello</h1>
	</body>
</html>

이 문서를 구성하고 있는 html요소는 모두 6개이며
각각은 객체로 인식되며 또 계층형의 구조를 갖게 된다.

즉 최상위 노드가 html이면 html의 자식은
head와 body 두개의 노드이다.
head의 자식은 title이며 title의 자식은 text글자를 가지고 있는 
text 노드 이다.
body의 자식은 a와 h1이며 a의 자식은 "naver"라는 글자를 가지고 있는 text노드이고
h1의 자식은 "hello"라는 글자를 가지고 있는 text노드 이다

html	<-- head	<-- title	<-- text
		<--	body	<-- a		<-- naver
					<--	h1		<-- hello
					
이와 같이 html의 모든 구성요소를 객체로 파악하는 모델을
DOM이라고 한다.

DOM객체 모델을 이용하여
동적인 html을 표현할 수 있다.
(사용자 요청에 의해서 새로운 노드를 추가, 필요없는 노드를 제거, 수정)

----------------------------------------------------------------------------------------------

정적 html : 웹페이지를 실행할 때 처음부터 HTML 태그로 적힌 문서 객체를 말한다.
동적 html : 처음에는 없었는데 실행중에 사용자의 요청에 의해서 만들거나 수정하거나 제거하는 것을 말한다.

------------------------------------------------------------------------------

<< 잘못된 사용 >>

<html>
	<head>
		<script>
			document.getElementById("title").style.background = "red";
		</script>
	</head>

	<body>
		<h1 id="title">JavaScript</h1>
	</body>
</html>

==> html이 모두 만들어지기도 전에 자바스크립트가 동작하기 때문에
	오류가 발생

<< 올바른 사용 1 >>
<html>
	<head>
	</head>
	<body>
	
		<h1 id="title">JavaScript</h1>
		
		<script type="text/javascript">
			document.getElementById("title").style.background = "red";
		</script>
		
	</body>
</html>

==> 자바스크립트에 사용할 html태그를 만들고 난 뒤에다가 자바스크립트를 써 준다.

<< 올바른 사용2>>
<html>
	<head>
		<script>
			window.onload = function(){
				document.getElementById("title").style.background = "red";
			}
		</script>
	</head>

	<body>
		<h1 id="title">JavaScript</h1>
	</body>
</html>

보통은 자바스크립트는 head에 둔다.
그대신 html이 모두 만들어지고 난 다음에 동작시키기 위하여
window.onload 라는 이벤트를 연결하여 그안에 자바스크립트를 써 준다.

----------------------------------------------------------------------------

<< 대상이 되는 노드 찾기>>

document.getElementById();				<-- 아이디 식별자를 갖는 태그 한개를 반환
document.querySelector(선택자);			<--	선택자로 한개를 반환

document.getElementsByclassName();		<-- 클래스이름을 갖는 태그들을 배열로 반환
											그 클래스 이름을 갖는 태그가 문서안에
											한개 밖에 없다 하더라도 배열로 반환
document.getElementsByTagName();		<-- 태그 이름을 갖는 태그들을 배열로 반환
											그 태그이름을 갖는 노드가 문서안에 한개
											밖에 없다하더라도 배열로 반환한다.
											
document.querySelectorAll(선택자);		<-- 선택자로 여러개(배열)를 반환

----------------------------------------------------------------------------------

<< 문서 객체 조작 >>

1) 글자 조작											
	textContent ==> 문서 객체 내부의 글자를 순수한 텍스트 형식으로 설정(변경)
	innerHTML	==> 문서 객체 내부의 글자를 HTML형식으로 반영하여 설정(변경)
	
	설정하고자 하는 글자가
	html형식이 아닐때에는 차이가 없다.
	
2) 스타일 조작
	style.속성명 = 값
	
	let title= document.querySelector("#title");
	title.style.background = "red";
	
	만약에 배열이라면
	반복문을 순회하면서 하나씩 설정해야 한다.
	
	let arr = document.querySelectorAll("member");
	
	for(i=0; i<arr.length: i++){
		arr[i].style.background="red";
	}
	==> 일일이 반복문을 순회하면서 설정해야 되서 번거롭다.
	이것을 손쉽게 해주는 자바스크립트 라이브러리
	==> jquery, react, vue.JS
	
3) 속성 조작
	
	객체.setAttribute("속성이름", 값);		<-- 속성을 번경하기
	객체.getAttribute("속성이름", 값);		<-- 속성값 읽어오기
	
	객체.속성명 = 값;		<--- 그 html태그가 원래 부터 갖고 있는 속성일때만 가능
							 원래부터 갖고 있는 속성이 아닐때에는 이렇게 사용할 수 없다.
							 
	때로는 html태그가 원래부터 갖고 있는 속성이 아닌데
	프로그램의 처리를 위하여 임의의 속성을 부여 할 수 있다.
	그때에는 setAttribute(), getAttribute()를 통해서만 설정하고 읽어올 수 있다.
	
	let divs = document.querySelectorAll("div");
		for(let i=0; i<divs.length; i++){
			divs[i].setAttribute("idx", i);
		}

----------------------------------------------------------------------------------

전통적으로 화면 배치 또는 공간 분할을 위하여 div 와 span 을 많이 사용한다.
현재는 시멘틱 태그를 사용하기를 권장하지만 여전히 현장에서는 div 와 span 을 사용하고 있다.


div : 블록 형식으로 공간을 분할 => 세로로 배치, 크기를 설정할 수 있다.
span : 인라인 형식으로 공간을 분항 => 가로로 배치, 크기를 설정할 수 없다.


인라인 블록(inline-block ) : 인라인이면서 블록 성격을 가짐 => 가로로 배치 => 크기 설정 가능
span, div 둘 다 inline -block 으로 변경 가능
블록형식 태그 : div, h1~h2, p, li, table
인라인형식 태그 : span, a, input, select등등 입력양식 태그, b, i 등 글자 관련 태그

----------------------------------------------------------------

	<div id="header"></div>
	<div id="nav"></div>
	<div id="section"></div>
	<div id="footer"></div>
	
	전통적으로 화면(공간)을 분할하기 위하여
	위의 방식처럼 div로 분할을 하고 id식별자를 사용.
	그러나 사람들마다 저 식별자를 다르게 지정할 수 있고
	이것은 전체코드를 읽고 분석하기에 어려움이 있다.
	
	그래서 html5에서
	"시멘틱 태그(Semantic Tag)를 도입하여 웹 구조와 의미를 명확하게
	하기를 권장
	
	시멘틱 태그는
	의미를 부여 하는 것이지
	그 자체가 모양을 결정하지는 않는다.
	모양을 지정하기 위해서는 별도의 css를 설정해야한다.
	
	<<시멘틱 태그의 종류>>
	header		: 머리말(페이지의 제목, 페이지 소개)
	nav			: 하이퍼링크들을 모아 둔 네비게이션
	aside		: 본문의 흐름에서 벗어나는 노트나 팁
	section		: 문서의 장이나 절에 해당하는 내용
	article		: 본문과 독립적인 콘텐츠 영역
	main		: 문서의 주요내용
	footer		: 꼬리말(저자나 저작권의 정보), 기업의 정보
	figure		: 이미지
	
----------------------------------------------------------------

선택자 :
		css를 지정하기 위하여
		대상이 되는 노드(태그)를
		선택하는것을 말한다.
		
<style>
	선택자{
		css내용
	}
</style>

---------------------------------------------------------------

	태그이름 {
		
	}
	==> 특정 태그에 대하여 css를 적용
	
	.클래스이름{
	
	}
	==> 서로 관련 있는 요소들을 그룹화 할때 class를 사용한다.
	
	#아이디이름{
	
	}
	==> 요소들 중에 유일한 식별자를 지정하기 위하여 id를 이용
		특정 id를 갖는 요소에 대하여 css를 적용
		
	*{
	
	}
	==> html의 모든 요소를 지정할 때에 *와일드카드를 이용

----------------------------------------------------------------
<< css를 적용하기 위하여 대상이 되는 노드를 선택하기 >>
==> 선택자

1) *		모두 선택하기
----------------------------------------------------------------
2) 태그이름
	h1{
	
	}
	
	h1, p, span{
	
	}
______________________________________________________________

3) 아이디
	#lee{
	
	}
	
	#lee, #kim{
	
	}

______________________________________________________________
	
4) 클래스이름
	.member{
	
	}
	
	.member, .manager{
	
	}
______________________________________________________________
	
5) 속성선택자
	태그이름[속성명]{
	
	}
	==> 그 태그에 특정 속성이 있는 요소들만 선택
	input[id]		==> input 태그들 중에 id속성이 있는 요소들만 선택
	
	태그이름[속성명=값]{
	
	}
	==> 그 태그에 속성값을 만족하는 요소들만 선택
	input{type=text]
	==> input 태그들 중에 type이 text인것만 선택
______________________________________________________________
	
6) 자식과 후손 선택자

	후손선택
		기준노드 찾을선택자
	#header h1{
		color: red;
	}
	
	아이디가 header인 후손들 모두 중에서 h1태그를 찾아서 css 적용 
	
________________________________________________________________

	자식선택
		기준노드 > 찾을선택자
	
	#header > h1{
		color: red;
	}
	
	아이디가 header인 요소를 기준으로
	자식들 중에서만 h1태그를 찾아서 css 적용
	
________________________________________________________________

<ui>
	<li>첫번째</li>
	<li>두번째</li>
	<li>세번째</li>
	<li>네번째</li>
	<li>다섯번째</li>
	<li>여섯번째</li>
	<li>일곱번째</li>
</ui>

li:first-child		==> li중에 맨 첫번째 요소
li:last-child		==>			마지막 요소 
li:nth-child(2n)	==> 		짝수번째
li:nth-child(2n+1)	==> 		홀수번째

---------------------------------------------------------------------

색상설정하기

1) red, blue, green 처럼 미리 정해진 값을 이용하여 설정할 수 있다.
2) rgb함수를 이용하여 설정 할 수 있다.
   R:red, G:green, B:blue 이며
   각각의 값은 0~255사이 이다.

3) #rrggbb 의 형태로 컬러를 설정할 수 있다.
	rr, gg, bb의 값은		0~255까지를 16진수로 표현
						00~ff

4) rgba(red,green,blue,alpha)
	알파값은 투명도를 나타낸다 0.0 ~ 1.0
	0.0 : 완전불투명 1.1 : 완전투명
	
-------------------------------------------------------------------
div{
		width: 100px;
		height: 100px;
		background: red;
		border: solid 10px blue;
		margin: 10px;
		padding: 10px;
		box-sizing: border-box;
	}
	
box-sizing: content-box;
==> 혹은 생략하면
	가로,세로 크기를 설정하면
	컨텐츠에 대한 크기를 말하며
	테두리 두께와, 안쪽여백을 고려해야 한다.
	
box-sizing: border-box;
==> 가로,세로 크기를 설정하면
	컨텐츠, 한쪽여백, 테두리 두께 까지를 합한 크기가 된다.
	
---------------------------------------------------------------
margin:값
==> 위,아래,왼쪽,오른쪽 모두 같은 값으로 설정

margin:값1 값2 값3 값4
==> 위, 오른쪽, 아래쪽, 왼쪽 차례로 값을 설정.

margin:값1 값2 값3
==> 값1 : 위쪽
	값2 : 왼쪽, 오른쪽
	값3 : 아래쪽

margin:값1 값2
==> 값1: 위쪽, 아래쪽
	값2: 왼쪽, 오른쪽
	
padding도 margin과 같은 방식으로 설정 가능

----------------------------------------------------------------------

border-radius: 값
==> 4꼭지점 모두 값으로 설정
border-radius: 값1 값2 값3 값4
==> 왼쪽위, 오른쪽위, 오른쪽아래, 왼쪽아래 순으로 설정
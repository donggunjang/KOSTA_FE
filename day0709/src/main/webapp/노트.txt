<< 미디어 쿼리 설정 >>
@media 미디어타입(미디어 특징) {
	css설정
}

<< 미디어타입 >>
all			: 모든 장치
screen		: 화면
tv			: TV
print		: 프린터
projection 	: 프로젝터

<< 미디어타입 사용할 수 있는 연산자 >>
and		: 미디어 타입과 미디어 특징을 연결하기 위한 연산자.
		  두개 이상의 미디어 타입을 선택.
only	: 해당 장치에서만 의미
not		: 해당 장치를 제외할 때

<< 미디어 특징 >>
width			화면 너비
height			화면 높이
device-width	장치 너비
device-height	장치 높이
orientation		장치 방향
...
----------------------------------------------------------

@media 미디어쿼리{
	css 설정	
}

<link rel="stylesheet" href="css파일명" media="미디어쿼리">

----------------------------------------------------------

<< 미디어 특징을 사용하여 장치를 구분하기 >>

1. 화면이면서 최대너비가 767px일때 phone.css 설정하기
<link rel="stylesheet" href="phone.css" media="screen and (max-width:767px)">

2. 화면이면서 최소너비가 768px 최대 너비가 959px 일때, tablet.css 설정하기
<link rel="stylesheet" href="tablet.css" media="screen and (min-width:768px) and (max-width:959px)">

3. 화면이면서 최소너비가 960px일때 desktop.css 설정하기
<link rel="stylesheet" href="desktop.css" media="screen and (min-width:960)">

---------------------------------------------------------------------------------------

<< 화면 방향 전환에 따른 css 설정 >>
orientation		장치 방향

세로방향 설정
@media screen and (orientation: portrait){

}

가로방향 설정
@media screen and (orientation: landscape){

}

--------------------------------------------------------------------------------------

<< 일반적인 미디어 쿼리 작성 순서 >>
보통은 일단 데스크탑 전용으로 만들고
뒤에다가 태블릿  pc와 스마트폰에 맞도록 스타일을 입력.

--------------------------------------------------------------------------------------

<< 반응형 웹 패턴 >>
1)	너비가 넓은 화면(데스크탑) 에서는 메뉴가 	왼쪽
	너비가 좁은 화면(모바일장치) 에서는 메뉴가 	위쪽
	
2)	너비가 넓은 화면(데스크탑) 에서는 메뉴가 	오른쪽
	너비가 좁은 화면(모바일장치) 에서는 메뉴가 	위쪽
	
3)	너비가 넓은 화면(데스크탑) 에서는 메뉴가 	왼쪽
	너비가 좁은 화면(모바일장치) 에서는 메뉴가 	아래쪽
	
4)	너비가 넓은 화면(데스크탑) 에서는 메뉴가 	오른쪽
	너비가 좁은 화면(모바일장치) 에서는 메뉴가 	아래쪽
	
-------------------------------------------------------------------------------------
JavaScript
==> 프론트엔드 동작		**
==> 백엔드 	동작

전통적으로 자바스크립트는
	jsp와 마찬가지로 웹프로그래밍 언어이며
	동적인 html을 생성하는 것이 목적이다.
	
	jsp와 달린
	자바스크립트는 실행되는 위치가 웹브라우저이기 때문에
	소스코드가 모두 노출된다.
	
	따라스 웹 초기에는
	이러한 자바스크립트를 중요하게 여기지 않았다.
	
	그러나 현재는 
	사용자의 요청에 의해서 다른 문서로
	이동이 될때에 문서 전체를 모두 변경시키는 풀브라우징 보다는
	문서의 일 부분만 변경시키는 동작이 상당하다.
	
	이때, 서버로 부터 필요한 데이터만 받아와서 동적인 html을
	생성할 수 있다.
	
	이것은 모두 자바스크립트로 표현할 수 있다. 또, 2007년 즈음
	크롬 브라우저가 발표 되면서 웹 브라우저가 아닌 곳에서도
	자바스크립트를 동작 시킬수 있는 기술인 node.js가 만들어 졌다
	
	웹 브라우저가 아닌 곳에서도 동작하는 node.js를 이용하면
	톰켓 같은 무거운 웹어플리케이션 서버를 별도로 두지 않고
	서버를 가동시킬 수 도 있다. 
	
	그래서 현재는
	자바스크립트가 굉장히 중요하게 여겨진다.
	
	또, 서버로 부터 데이터를 받아와서 동적인 html을 생성하는 기술로써는
	자바스크립트를 기반으로한 jQuery, react, angular, VueJS 등이
	중요하게 여겨지고 있다.
	
-------------------------------------------------------------------------------

Javascript와 
Java 언어가 이름이 유사하지만
전혀 상관 없다.

그러나 둘 다 C언어를 기반으로 만들어 졌기 때문에
문법이 60%정도 유사하다.
	
---------------------------------------------------------------------------------

명령어 끝네 세미콜론(;)을 붙여도 되고 안붙여도 된다.
a = 5
a = 5;

------------------------------------------------------------------------------------------

식별자 : 변수이름이 함수, 클래스이름과 같이 이름을 정해 주는 것을 말한다.
		자바의 식별자 규칙과 동일 한 규칙을 따른다.
		
		가능			불가능
		age			break
		age10		10age
		myAge		my age
		_age		#age
		$age		
		
-----------------------------------------------------------------------------------------

주석문

//			<-- 한줄 주석
/*  */		<-- 여러줄 주석

-----------------------------------------------------------------------------------------
웹브라우저에 경고창 띄우기
	alert("메세지내용");
	
-----------------------------------------------------------------------------------------
변수의 사용
	자바의 경우는 변수를 선언하고
	값을 지정할 수 있다.
	
그러나 자바스크립트는
	따로 변수를 선언하는 명령이 없다.
	따로 선언하는 문장 필요없이 값을 바로 저장 할 수 있다.
	
	자바
	int age;
	age = 20;
	
	int age = 20;
	
	자바스크립트
	age = 20;
	
---------------------------------------------------------------------------------
<< 오류의 처리 방법 >>
크롬의 개발자 도구에서
console에 표시된 오류 메세지를 보고 수정한다.

------------------------------------------------------------------------------------

var의 사용

이러한 변수를 사용하겠습니다. 라고 명시하기 위하여 살용하는 키워드.

age = 20;

var age;
age = 20;

var age = 20;

-------------------------------------------------------------------------------
<script type="text/javascript">
	var today = new Date();
	var year = today.getFullYear();
	document.getElementById("output").innerHTML = year;
</script>

오늘날짜: <span id="output"></span>

오류:
ex14_js_date_span.html:11 Uncaught TypeError: Cannot set properties of null (setting 'innerHTML')
    at ex14_js_date_span.html:11:46

순차적으로 코드가 실행되기 때문에 이런 오류가 발생

------------------------------------------------------------------------------

<< 타이머 설정하기 >>

setInterval(함수,시간);
	정해진 시간간격마다 함수를 동작 시킵니다.
	시간은 밀리세컨으로 설정
	1000ms -> 1s
	
setInterval(pro, 1000);
	==> 1초마다 pro 함수를 동작.
	
-------------------------------------------------------------------------------
함수(function)
	==> 어떤 기능을 수행하기 위한 서로 관련있는 명령어들의 집합

<< 함수 생성 방법 >>
1) 선언적 함수
	function 함수이름(){
	
	}

2) 익명함수(이름없는 함수)
	function(){
	
	}
	
---------------------------------------------------------------------------------


    
	
	 